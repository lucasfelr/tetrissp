/*******************************************************************************/
/*  This file is auto-generated by GUIX Studio. Do not edit this file by hand. */
/*  Modifications to this file should only be made by running the GUIX Studio  */
/*  application and re-generating the application. For more information please */
/*  refer to the GUIX Studio user's guide, or visit our web site at            */
/*  www.expresslogic.com.                                                      */
/*                                                                             */
/*  GUIX Studio Revision 5.6.1.0                                               */
/*  Date (dd.mm.yyyy): 24. 5.2021   Time (hh:mm): 08:00                        */
/*******************************************************************************/


#ifndef _GUIAPP_SPECIFICATIONS_H_
#define _GUIAPP_SPECIFICATIONS_H_

#include "gx_api.h"

/* Determine if C++ compiler is being used, if so use standard C.              */
#ifdef __cplusplus
extern   "C" {
#endif

/* Define widget ids                                                           */

#define ID_WINDOW2 1
#define ID_RESET 2
#define ID_FIM 3
#define ID_WINDOW1 4
#define ID_PONTUACAO 5
#define ID_ICON 6
#define ID_ROTATE 7
#define ID_ESQUERDA 8
#define ID_DIREITA 9
#define ID_SPRITE1_1 10
#define ID_SPRITE2_1 11
#define ID_SPRITE4_1 12
#define ID_SPRITE3_1 13
#define ID_SPRITE5_1 14
#define ID_SPRITE6_1 15
#define ID_SPRITE7_1 16
#define ID_SPRITE8_1 17
#define ID_SPRITE13_1 18
#define ID_SPRITE14_1 19
#define ID_SPRITE15_1 20
#define ID_SPRITE16_1 21
#define ID_SPRITE12_1 22
#define ID_SPRITE11_1 23
#define ID_SPRITE10_1 24
#define ID_SPRITE9_1 25
#define ID_SPRITE20_1 26
#define ID_SPRITE19_1 27
#define ID_SPRITE18_1 28
#define ID_SPRITE17_1 29
#define ID_SPRITE1_2 30
#define ID_SPRITE2_2 31
#define ID_SPRITE3_2 32
#define ID_SPRITE4_2 33
#define ID_SPRITE5_2 34
#define ID_SPRITE6_2 35
#define ID_SPRITE7_2 36
#define ID_SPRITE8_2 37
#define ID_SPRITE9_2 38
#define ID_SPRITE10_2 39
#define ID_SPRITE11_2 40
#define ID_SPRITE12_2 41
#define ID_SPRITE13_2 42
#define ID_SPRITE14_2 43
#define ID_SPRITE15_2 44
#define ID_SPRITE16_2 45
#define ID_SPRITE17_2 46
#define ID_SPRITE18_2 47
#define ID_SPRITE19_2 48
#define ID_SPRITE20_2 49
#define ID_SPRITE1_3 50
#define ID_SPRITE2_3 51
#define ID_SPRITE3_3 52
#define ID_SPRITE4_3 53
#define ID_SPRITE5_3 54
#define ID_SPRITE6_3 55
#define ID_SPRITE7_3 56
#define ID_SPRITE8_3 57
#define ID_SPRITE9_3 58
#define ID_SPRITE10_3 59
#define ID_SPRITE11_3 60
#define ID_SPRITE12_3 61
#define ID_SPRITE13_3 62
#define ID_SPRITE14_3 63
#define ID_SPRITE15_3 64
#define ID_SPRITE16_3 65
#define ID_SPRITE17_3 66
#define ID_SPRITE18_3 67
#define ID_SPRITE19_3 68
#define ID_SPRITE20_3 69
#define ID_SPRITE1_4 70
#define ID_SPRITE2_4 71
#define ID_SPRITE3_4 72
#define ID_SPRITE4_4 73
#define ID_SPRITE5_4 74
#define ID_SPRITE6_4 75
#define ID_SPRITE7_4 76
#define ID_SPRITE8_4 77
#define ID_SPRITE9_4 78
#define ID_SPRITE10_4 79
#define ID_SPRITE11_4 80
#define ID_SPRITE12_4 81
#define ID_SPRITE13_4 82
#define ID_SPRITE14_4 83
#define ID_SPRITE15_4 84
#define ID_SPRITE16_4 85
#define ID_SPRITE17_4 86
#define ID_SPRITE18_4 87
#define ID_SPRITE19_4 88
#define ID_SPRITE20_4 89
#define ID_SPRITE1_5 90
#define ID_SPRITE2_5 91
#define ID_SPRITE3_5 92
#define ID_SPRITE4_5 93
#define ID_SPRITE5_5 94
#define ID_SPRITE6_5 95
#define ID_SPRITE7_5 96
#define ID_SPRITE8_5 97
#define ID_SPRITE9_5 98
#define ID_SPRITE10_5 99
#define ID_SPRITE11_5 100
#define ID_SPRITE12_5 101
#define ID_SPRITE13_5 102
#define ID_SPRITE14_5 103
#define ID_SPRITE15_5 104
#define ID_SPRITE16_5 105
#define ID_SPRITE17_5 106
#define ID_SPRITE18_5 107
#define ID_SPRITE19_5 108
#define ID_SPRITE20_5 109
#define ID_SPRITE1_6 110
#define ID_SPRITE2_6 111
#define ID_SPRITE3_6 112
#define ID_SPRITE4_6 113
#define ID_SPRITE5_6 114
#define ID_SPRITE6_6 115
#define ID_SPRITE7_6 116
#define ID_SPRITE8_6 117
#define ID_SPRITE9_6 118
#define ID_SPRITE10_6 119
#define ID_SPRITE11_6 120
#define ID_SPRITE12_6 121
#define ID_SPRITE13_6 122
#define ID_SPRITE14_6 123
#define ID_SPRITE15_6 124
#define ID_SPRITE16_6 125
#define ID_SPRITE17_6 126
#define ID_SPRITE18_6 127
#define ID_SPRITE19_6 128
#define ID_SPRITE20_6 129
#define ID_SPRITE1_7 130
#define ID_SPRITE2_7 131
#define ID_SPRITE3_7 132
#define ID_SPRITE4_7 133
#define ID_SPRITE5_7 134
#define ID_SPRITE6_7 135
#define ID_SPRITE7_7 136
#define ID_SPRITE8_7 137
#define ID_SPRITE9_7 138
#define ID_SPRITE10_7 139
#define ID_SPRITE11_7 140
#define ID_SPRITE12_7 141
#define ID_SPRITE13_7 142
#define ID_SPRITE14_7 143
#define ID_SPRITE15_7 144
#define ID_SPRITE16_7 145
#define ID_SPRITE17_7 146
#define ID_SPRITE18_7 147
#define ID_SPRITE19_7 148
#define ID_SPRITE20_7 149
#define ID_SPRITE1_8 150
#define ID_SPRITE2_8 151
#define ID_SPRITE3_8 152
#define ID_SPRITE4_8 153
#define ID_SPRITE5_8 154
#define ID_SPRITE6_8 155
#define ID_SPRITE7_8 156
#define ID_SPRITE8_8 157
#define ID_SPRITE9_8 158
#define ID_SPRITE10_8 159
#define ID_SPRITE11_8 160
#define ID_SPRITE12_8 161
#define ID_SPRITE13_8 162
#define ID_SPRITE14_8 163
#define ID_SPRITE15_8 164
#define ID_SPRITE16_8 165
#define ID_SPRITE17_8 166
#define ID_SPRITE18_8 167
#define ID_SPRITE19_8 168
#define ID_SPRITE20_8 169
#define ID_SPRITE1_9 170
#define ID_SPRITE2_9 171
#define ID_SPRITE3_9 172
#define ID_SPRITE4_9 173
#define ID_SPRITE5_9 174
#define ID_SPRITE6_9 175
#define ID_SPRITE7_9 176
#define ID_SPRITE8_9 177
#define ID_SPRITE9_9 178
#define ID_SPRITE10_9 179
#define ID_SPRITE11_9 180
#define ID_SPRITE12_9 181
#define ID_SPRITE13_9 182
#define ID_SPRITE14_9 183
#define ID_SPRITE15_9 184
#define ID_SPRITE16_9 185
#define ID_SPRITE17_9 186
#define ID_SPRITE18_9 187
#define ID_SPRITE19_9 188
#define ID_SPRITE20_9 189
#define ID_SPRITE1_10 190
#define ID_SPRITE2_10 191
#define ID_SPRITE3_10 192
#define ID_SPRITE4_10 193
#define ID_SPRITE5_10 194
#define ID_SPRITE6_10 195
#define ID_SPRITE7_10 196
#define ID_SPRITE8_10 197
#define ID_SPRITE9_10 198
#define ID_SPRITE10_10 199
#define ID_SPRITE11_10 200
#define ID_SPRITE12_10 201
#define ID_SPRITE13_10 202
#define ID_SPRITE14_10 203
#define ID_SPRITE15_10 204
#define ID_SPRITE16_10 205
#define ID_SPRITE17_10 206
#define ID_SPRITE18_10 207
#define ID_SPRITE19_10 208
#define ID_SPRITE20_10 209
#define ID_NEXT 210
#define ID_NEXT2_2 211
#define ID_NEXT2_3 212
#define ID_NEXT1_3 213
#define ID_NEXT1_2 214
#define ID_NEXT1_1 215
#define ID_NEXT2_4 216
#define ID_NEXT1_4 217
#define ID_NEXT2_1 218


/* Define animation ids                                                        */

#define GX_NEXT_ANIMATION_ID 1


/* Define user event ids                                                       */

#define GX_NEXT_USER_EVENT_ID GX_FIRST_USER_EVENT


/* Declare properties structures for each utilized widget type                 */

typedef struct GX_STUDIO_WIDGET_STRUCT
{
   GX_CHAR *widget_name;
   USHORT  widget_type;
   USHORT  widget_id;
   #if defined(GX_WIDGET_USER_DATA)
   INT   user_data;
   #endif
   ULONG style;
   ULONG status;
   ULONG control_block_size;
   GX_RESOURCE_ID normal_fill_color_id;
   GX_RESOURCE_ID selected_fill_color_id;
   GX_RESOURCE_ID disabled_fill_color_id;
   UINT (*create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   void (*draw_function) (GX_WIDGET *);
   UINT (*event_function) (GX_WIDGET *, GX_EVENT *);
   GX_RECTANGLE size;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *next_widget;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *child_widget;
   ULONG control_block_offset;
   GX_CONST void *properties;
} GX_STUDIO_WIDGET;

typedef struct
{
    GX_CONST GX_STUDIO_WIDGET *widget_information;
    GX_WIDGET        *widget;
} GX_STUDIO_WIDGET_ENTRY;

typedef struct
{
    GX_RESOURCE_ID string_id; 
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
} GX_TEXT_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID pixelmap_id;
} GX_ICON_BUTTON_PROPERTIES;

typedef struct
{
    GX_SPRITE_FRAME *frame_list;
    USHORT           frame_count;
} GX_SPRITE_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
} GX_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
    VOID (*format_func)(GX_NUMERIC_PROMPT *, INT);
    INT            numeric_prompt_value;
} GX_NUMERIC_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
} GX_WINDOW_PROPERTIES;


/* Declare top-level control blocks                                            */

typedef struct WINDOW2_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT window2_prompt_1;
    GX_TEXT_BUTTON window2_button_1;
    GX_NUMERIC_PROMPT window2_prompt_4;
    GX_PROMPT window2_prompt;
} WINDOW2_CONTROL_BLOCK;

typedef struct WINDOW1_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT window1_prompt_3;
    GX_NUMERIC_PROMPT window1_prompt;
    GX_PROMPT window1_prompt_2;
    GX_SPRITE window1_sprite;
    GX_ICON_BUTTON window1_icon_button;
    GX_ICON_BUTTON window1_icon_button_1;
    GX_ICON_BUTTON window1_icon_button_2;
    GX_SPRITE window1_sprite_1_1;
    GX_SPRITE window1_sprite_2_1;
    GX_SPRITE window1_sprite_4_1;
    GX_SPRITE window1_sprite_3_1;
    GX_SPRITE window1_sprite_5_1;
    GX_SPRITE window1_sprite_6_1;
    GX_SPRITE window1_sprite_7_1;
    GX_SPRITE window1_sprite_8_1;
    GX_SPRITE window1_sprite_13_1;
    GX_SPRITE window1_sprite_14_1;
    GX_SPRITE window1_sprite_15_1;
    GX_SPRITE window1_sprite_16_1;
    GX_SPRITE window1_sprite_12_1;
    GX_SPRITE window1_sprite_11_1;
    GX_SPRITE window1_sprite_10_1;
    GX_SPRITE window1_sprite_9_1;
    GX_SPRITE window1_sprite_20_1;
    GX_SPRITE window1_sprite_19_1;
    GX_SPRITE window1_sprite_18_1;
    GX_SPRITE window1_sprite_17_1;
    GX_SPRITE window1_sprite_1_2;
    GX_SPRITE window1_sprite_2_2;
    GX_SPRITE window1_sprite_3_2;
    GX_SPRITE window1_sprite_4_2;
    GX_SPRITE window1_sprite_5_2;
    GX_SPRITE window1_sprite_6_2;
    GX_SPRITE window1_sprite_7_2;
    GX_SPRITE window1_sprite_8_2;
    GX_SPRITE window1_sprite_9_2;
    GX_SPRITE window1_sprite_10_2;
    GX_SPRITE window1_sprite_11_2;
    GX_SPRITE window1_sprite_12_2;
    GX_SPRITE window1_sprite_13_2;
    GX_SPRITE window1_sprite_14_2;
    GX_SPRITE window1_sprite_15_2;
    GX_SPRITE window1_sprite_16_2;
    GX_SPRITE window1_sprite_17_2;
    GX_SPRITE window1_sprite_18_2;
    GX_SPRITE window1_sprite_19_2;
    GX_SPRITE window1_sprite_20_2;
    GX_SPRITE window1_sprite_1_3;
    GX_SPRITE window1_sprite_2_3;
    GX_SPRITE window1_sprite_3_3;
    GX_SPRITE window1_sprite_4_3;
    GX_SPRITE window1_sprite_5_3;
    GX_SPRITE window1_sprite_6_3;
    GX_SPRITE window1_sprite_7_3;
    GX_SPRITE window1_sprite_8_3;
    GX_SPRITE window1_sprite_9_3;
    GX_SPRITE window1_sprite_10_3;
    GX_SPRITE window1_sprite_11_3;
    GX_SPRITE window1_sprite_12_3;
    GX_SPRITE window1_sprite_13_3;
    GX_SPRITE window1_sprite_14_3;
    GX_SPRITE window1_sprite_15_3;
    GX_SPRITE window1_sprite_16_3;
    GX_SPRITE window1_sprite_17_3;
    GX_SPRITE window1_sprite_18_3;
    GX_SPRITE window1_sprite_19_3;
    GX_SPRITE window1_sprite_20_3;
    GX_SPRITE window1_sprite_1_4;
    GX_SPRITE window1_sprite_2_4;
    GX_SPRITE window1_sprite_3_4;
    GX_SPRITE window1_sprite_4_4;
    GX_SPRITE window1_sprite_5_4;
    GX_SPRITE window1_sprite_6_4;
    GX_SPRITE window1_sprite_7_4;
    GX_SPRITE window1_sprite_8_4;
    GX_SPRITE window1_sprite_9_4;
    GX_SPRITE window1_sprite_10_4;
    GX_SPRITE window1_sprite_11_4;
    GX_SPRITE window1_sprite_12_4;
    GX_SPRITE window1_sprite_13_4;
    GX_SPRITE window1_sprite_14_4;
    GX_SPRITE window1_sprite_15_4;
    GX_SPRITE window1_sprite_16_4;
    GX_SPRITE window1_sprite_17_4;
    GX_SPRITE window1_sprite_18_4;
    GX_SPRITE window1_sprite_19_4;
    GX_SPRITE window1_sprite_20_4;
    GX_SPRITE window1_sprite_1_5;
    GX_SPRITE window1_sprite_2_5;
    GX_SPRITE window1_sprite_3_5;
    GX_SPRITE window1_sprite_4_5;
    GX_SPRITE window1_sprite_5_5;
    GX_SPRITE window1_sprite_6_5;
    GX_SPRITE window1_sprite_7_5;
    GX_SPRITE window1_sprite_8_5;
    GX_SPRITE window1_sprite_9_5;
    GX_SPRITE window1_sprite_10_5;
    GX_SPRITE window1_sprite_11_5;
    GX_SPRITE window1_sprite_12_5;
    GX_SPRITE window1_sprite_13_5;
    GX_SPRITE window1_sprite_14_5;
    GX_SPRITE window1_sprite_15_5;
    GX_SPRITE window1_sprite_16_5;
    GX_SPRITE window1_sprite_17_5;
    GX_SPRITE window1_sprite_18_5;
    GX_SPRITE window1_sprite_19_5;
    GX_SPRITE window1_sprite_20_5;
    GX_SPRITE window1_sprite_1_6;
    GX_SPRITE window1_sprite_2_6;
    GX_SPRITE window1_sprite_3_6;
    GX_SPRITE window1_sprite_4_6;
    GX_SPRITE window1_sprite_5_6;
    GX_SPRITE window1_sprite_6_6;
    GX_SPRITE window1_sprite_7_6;
    GX_SPRITE window1_sprite_8_6;
    GX_SPRITE window1_sprite_9_6;
    GX_SPRITE window1_sprite_10_6;
    GX_SPRITE window1_sprite_11_6;
    GX_SPRITE window1_sprite_12_6;
    GX_SPRITE window1_sprite_13_6;
    GX_SPRITE window1_sprite_14_6;
    GX_SPRITE window1_sprite_15_6;
    GX_SPRITE window1_sprite_16_6;
    GX_SPRITE window1_sprite_17_6;
    GX_SPRITE window1_sprite_18_6;
    GX_SPRITE window1_sprite_19_6;
    GX_SPRITE window1_sprite_20_6;
    GX_SPRITE window1_sprite_1_7;
    GX_SPRITE window1_sprite_2_7;
    GX_SPRITE window1_sprite_3_7;
    GX_SPRITE window1_sprite_4_7;
    GX_SPRITE window1_sprite_5_7;
    GX_SPRITE window1_sprite_6_7;
    GX_SPRITE window1_sprite_7_7;
    GX_SPRITE window1_sprite_8_7;
    GX_SPRITE window1_sprite_9_7;
    GX_SPRITE window1_sprite_10_7;
    GX_SPRITE window1_sprite_11_7;
    GX_SPRITE window1_sprite_12_7;
    GX_SPRITE window1_sprite_13_7;
    GX_SPRITE window1_sprite_14_7;
    GX_SPRITE window1_sprite_15_7;
    GX_SPRITE window1_sprite_16_7;
    GX_SPRITE window1_sprite_17_7;
    GX_SPRITE window1_sprite_18_7;
    GX_SPRITE window1_sprite_19_7;
    GX_SPRITE window1_sprite_20_7;
    GX_SPRITE window1_sprite_1_8;
    GX_SPRITE window1_sprite_2_8;
    GX_SPRITE window1_sprite_3_8;
    GX_SPRITE window1_sprite_4_8;
    GX_SPRITE window1_sprite_5_8;
    GX_SPRITE window1_sprite_6_8;
    GX_SPRITE window1_sprite_7_8;
    GX_SPRITE window1_sprite_8_8;
    GX_SPRITE window1_sprite_9_8;
    GX_SPRITE window1_sprite_10_8;
    GX_SPRITE window1_sprite_11_8;
    GX_SPRITE window1_sprite_12_8;
    GX_SPRITE window1_sprite_13_8;
    GX_SPRITE window1_sprite_14_8;
    GX_SPRITE window1_sprite_15_8;
    GX_SPRITE window1_sprite_16_8;
    GX_SPRITE window1_sprite_17_8;
    GX_SPRITE window1_sprite_18_8;
    GX_SPRITE window1_sprite_19_8;
    GX_SPRITE window1_sprite_20_8;
    GX_SPRITE window1_sprite_1_9;
    GX_SPRITE window1_sprite_2_9;
    GX_SPRITE window1_sprite_3_9;
    GX_SPRITE window1_sprite_4_9;
    GX_SPRITE window1_sprite_5_9;
    GX_SPRITE window1_sprite_6_9;
    GX_SPRITE window1_sprite_7_9;
    GX_SPRITE window1_sprite_8_9;
    GX_SPRITE window1_sprite_9_9;
    GX_SPRITE window1_sprite_10_9;
    GX_SPRITE window1_sprite_11_9;
    GX_SPRITE window1_sprite_12_9;
    GX_SPRITE window1_sprite_13_9;
    GX_SPRITE window1_sprite_14_9;
    GX_SPRITE window1_sprite_15_9;
    GX_SPRITE window1_sprite_16_9;
    GX_SPRITE window1_sprite_17_9;
    GX_SPRITE window1_sprite_18_9;
    GX_SPRITE window1_sprite_19_9;
    GX_SPRITE window1_sprite_20_9;
    GX_SPRITE window1_sprite_1_10;
    GX_SPRITE window1_sprite_2_10;
    GX_SPRITE window1_sprite_3_10;
    GX_SPRITE window1_sprite_4_10;
    GX_SPRITE window1_sprite_5_10;
    GX_SPRITE window1_sprite_6_10;
    GX_SPRITE window1_sprite_7_10;
    GX_SPRITE window1_sprite_8_10;
    GX_SPRITE window1_sprite_9_10;
    GX_SPRITE window1_sprite_10_10;
    GX_SPRITE window1_sprite_11_10;
    GX_SPRITE window1_sprite_12_10;
    GX_SPRITE window1_sprite_13_10;
    GX_SPRITE window1_sprite_14_10;
    GX_SPRITE window1_sprite_15_10;
    GX_SPRITE window1_sprite_16_10;
    GX_SPRITE window1_sprite_17_10;
    GX_SPRITE window1_sprite_18_10;
    GX_SPRITE window1_sprite_19_10;
    GX_SPRITE window1_sprite_20_10;
    GX_SPRITE window1_next5;
    GX_SPRITE window1_next2_2;
    GX_SPRITE window1_next2_3;
    GX_SPRITE window1_next1_3;
    GX_SPRITE window1_next1_2;
    GX_SPRITE window1_next1_1;
    GX_SPRITE window1_next2_4;
    GX_SPRITE window1_next1_4;
    GX_SPRITE window1_next2_1;
} WINDOW1_CONTROL_BLOCK;


/* extern statically defined control blocks                                    */

#ifndef GUIX_STUDIO_GENERATED_FILE
extern WINDOW2_CONTROL_BLOCK window2;
extern WINDOW1_CONTROL_BLOCK window1;
#endif

/* Prototype Synergy display driver specific functions                         */

UINT _gx_synergy_display_driver_setup(GX_DISPLAY *display);
#if defined(GX_TARGET_WIN32) || defined(GX_TARGET_LINUX)
UINT win32_synergy_graphics_driver_setup_565rgb(GX_DISPLAY *display);
#else
VOID _gx_display_driver_565rgb_setup(GX_DISPLAY *display, VOID *aux_data,
                           VOID (*toggle_function)(struct GX_CANVAS_STRUCT *canvas,
                           GX_RECTANGLE *dirty_area));
VOID _gx_dave2d_horizontal_pattern_line_draw_565(GX_DRAW_CONTEXT *context, INT xstart, INT xend, INT ypos);
VOID _gx_dave2d_vertical_pattern_line_draw_565(GX_DRAW_CONTEXT *context, INT ystart, INT yend, INT xpos);
VOID _gx_dave2d_pixel_write_565(GX_DRAW_CONTEXT *context, INT x, INT y, GX_COLOR color);
VOID _gx_dave2d_pixel_blend_565(GX_DRAW_CONTEXT *context, INT x, INT y, GX_COLOR fcolor, GX_UBYTE alpha);
VOID _gx_dave2d_pixelmap_rotate_16bpp(GX_DRAW_CONTEXT *context, INT xpos, INT ypos, GX_PIXELMAP *pixelmap, INT angle, INT rot_cx, INT rot_cy);
VOID _gx_dave2d_drawing_initiate(GX_DISPLAY *display, GX_CANVAS *canvas);
VOID _gx_dave2d_drawing_complete(GX_DISPLAY *display, GX_CANVAS *canvas);
VOID _gx_dave2d_horizontal_line(GX_DRAW_CONTEXT *context,
                             INT xstart, INT xend, INT ypos, INT width, GX_COLOR color);
VOID _gx_dave2d_vertical_line(GX_DRAW_CONTEXT *context,
                             INT ystart, INT yend, INT xpos, INT width, GX_COLOR color);
VOID _gx_dave2d_canvas_copy(GX_CANVAS *canvas, GX_CANVAS *composite);
VOID _gx_dave2d_canvas_blend(GX_CANVAS *canvas, GX_CANVAS *composite);
VOID _gx_dave2d_simple_line_draw(GX_DRAW_CONTEXT *context, INT xstart, INT ystart, INT xend, INT yend);
VOID _gx_dave2d_simple_wide_line(GX_DRAW_CONTEXT *context, INT xstart, INT ystart,
                                INT xend, INT yend);
VOID _gx_dave2d_aliased_line(GX_DRAW_CONTEXT *context, INT xstart, INT ystart, INT xend, INT yend);
VOID _gx_dave2d_aliased_wide_line(GX_DRAW_CONTEXT *context, INT xstart,
                                        INT ystart, INT xend, INT yend);
VOID _gx_dave2d_pixelmap_draw(GX_DRAW_CONTEXT *context, INT xpos, INT ypos, GX_PIXELMAP *pixelmap);
VOID _gx_dave2d_horizontal_pixelmap_line_draw(GX_DRAW_CONTEXT *context, INT xstart, INT xend, INT y, GX_FILL_PIXELMAP_INFO *info);
VOID _gx_dave2d_pixelmap_blend(GX_DRAW_CONTEXT *context, INT xpos, INT ypos,
                                      GX_PIXELMAP *pixelmap, GX_UBYTE alpha);
VOID _gx_dave2d_polygon_draw(GX_DRAW_CONTEXT *context, GX_POINT *vertex, INT num);
VOID _gx_dave2d_polygon_fill(GX_DRAW_CONTEXT *context, GX_POINT *vertex, INT num);
VOID _gx_dave2d_block_move(GX_DRAW_CONTEXT *context,
                          GX_RECTANGLE *block, INT xshift, INT yshift);
VOID _gx_dave2d_alphamap_draw(GX_DRAW_CONTEXT *context, INT xpos, INT ypos, GX_PIXELMAP *pixelmap);
VOID _gx_dave2d_compressed_glyph_8bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_raw_glyph_8bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_compressed_glyph_4bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_raw_glyph_4bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_compressed_glyph_1bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_raw_glyph_1bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_buffer_toggle(GX_CANVAS *canvas, GX_RECTANGLE *dirty);
#if defined(GX_ARC_DRAWING_SUPPORT)
VOID _gx_dave2d_aliased_circle_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r);
VOID _gx_dave2d_circle_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r);
VOID _gx_dave2d_circle_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r);
VOID _gx_dave2d_pie_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_aliased_arc_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_arc_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_arc_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_aliased_ellipse_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, INT a, INT b);
VOID _gx_dave2d_ellipse_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, INT a, INT b);
VOID _gx_dave2d_ellipse_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, INT a, INT b);
#endif
VOID _gx_synergy_jpeg_draw (GX_DRAW_CONTEXT *p_context, INT x, INT y, GX_PIXELMAP *p_pixelmap);

#endif

/* Declare event process functions, draw functions, and callback functions     */

UINT window2_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT window1_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);

/* Declare the GX_STUDIO_DISPLAY_INFO structure                                */


typedef struct GX_STUDIO_DISPLAY_INFO_STRUCT 
{
    GX_CONST GX_CHAR *name;
    GX_CONST GX_CHAR *canvas_name;
    GX_CONST GX_THEME **theme_table;
    GX_CONST GX_STRING **language_table;
    USHORT   theme_table_size;
    USHORT   language_table_size;
    UINT     string_table_size;
    UINT     x_resolution;
    UINT     y_resolution;
    GX_DISPLAY *display;
    GX_CANVAS  *canvas;
    GX_WINDOW_ROOT *root_window;
    GX_COLOR   *canvas_memory;
    ULONG      canvas_memory_size;
} GX_STUDIO_DISPLAY_INFO;


/* Declare Studio-generated functions for creating top-level widgets           */

UINT gx_studio_text_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_icon_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_sprite_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_numeric_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_window_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
GX_WIDGET *gx_studio_widget_create(GX_BYTE *storage, GX_CONST GX_STUDIO_WIDGET *definition, GX_WIDGET *parent);
UINT gx_studio_named_widget_create(char *name, GX_WIDGET *parent, GX_WIDGET **new_widget);
UINT gx_studio_display_configure(USHORT display, UINT (*driver)(GX_DISPLAY *), GX_UBYTE language, USHORT theme, GX_WINDOW_ROOT **return_root);

/* Determine if a C++ compiler is being used.  If so, complete the standard
  C conditional started above.                                                 */
#ifdef __cplusplus
}
#endif

#endif                                       /* sentry                         */
